/* Create a simple tic-tac-toe game. Depending on your skills and knowledge.

Hard: A regular tic-tac-toe, check diagonals as well. Instead of 1 and 0, use X and O (2D array should be of char type.)

After every move make sure the playing field is not full and make it draw, if it is full.
*/

  import java.util.Scanner;

  public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        char[][] grid = new char[3][3];
        char emptyCell = '-';
        char player1 = 'X';
        char player2 = 'O';
        boolean player1Turn = true;
        boolean gameIsOn= true;

        initialGrid(grid, emptyCell);
        printGrid(grid);
        System.out.println("Welcome to the Tic-Tac-Toe game!");

        while (gameIsOn) {
          int row = 0;
          int column = 0;

          if (player1Turn) {
              System.out.println("Enter the row number (1-3) for X: ");
              row = scanner.nextInt();
              System.out.println("Enter the column number (1-3) for X: ");
              column = scanner.nextInt();
          } else {
              System.out.println("Enter the row number (1-3) for O: ");
              row = scanner.nextInt();
              System.out.println("Enter the column number (1-3) for O: ");
              column = scanner.nextInt();
          }

          if (row < 1 || row > 3 || column < 1 || column > 3) {
              System.out.println("Invalid input. Try again.");
          } else if (grid[row - 1][column - 1] != emptyCell) {
              System.out.println("The cell is already occupied. Try again.");
          } else {
              if (player1Turn) {
                  grid[row - 1][column - 1] = player1;
                  if (winCheck(grid, player1)) {
                      System.out.println("Player X won!");
                      gameIsOn = false;
                  }
              } else {
                  grid[row - 1][column - 1] = player2;
                  if (winCheck(grid, player2)) {
                      System.out.println("Player O won!");
                      gameIsOn = false;
                  } 
              } 
              if (drawCheck(grid, emptyCell)) {
                  System.out.println("It's a draw!");
                  gameIsOn = false;
              }
              printGrid(grid);
              player1Turn = !player1Turn;
              }
        }  
        scanner.close();
      }

    public static void initialGrid(char[][] grid, char emptyCell) {
        for(int i = 0; i < grid.length; i++) {
          for(int j = 0; j < grid[i].length; j++) {
            grid[i][j] = emptyCell;
          }
        }
      }

    public static void printGrid(char[][] grid) {   
        for (int i = 0; i < grid.length; i++) {
          System.out.println("-------------");
            for(int j = 0; j < grid[i].length; j++) {
                System.out.print("| " + grid[i][j] + " "); 
            }
            System.out.println("|");                       
        }
        System.out.println("-------------"); 
    }

    public static boolean winCheck(char[][] grid, char player){
        for (int i = 0; i < grid.length; i++) {
            if ((grid[i][0] == player && grid[i][1] == player && grid[i][2] == player) || 
                (grid[0][i] == player && grid[1][i] == player && grid[2][i] == player)) {
                return true;
            }
        }
        if ((grid[0][0] == player && grid[1][1] == player && grid[2][2] == player) || 
            (grid[0][2] == player && grid[1][1] == player && grid[2][0] == player)) {
            return true;
    
        }
        return false;   
    }
    
    public static boolean drawCheck(char[][] grid, char emptyCell) {
        for (int i = 0; i < grid.length; i++) {
            for (int j = 0; j < grid[i].length; j++) {
                if (grid[i][j] == emptyCell) {
                    return false;
                } 
            }
        }
        return true;
    }
  }
